#!/usr/bin/env python3

"""
DDNS Updater
@author Philipp Meisberger

Copyright 2014 Philipp Meisberger
All rights reserved.
"""

## generic:
## https://<username>:<password>@<server><server_path>?hostname=<hostname>&myip=<ip>
##
## @see http://de.dyn.com/support/developers/api/perform-update/
##

from http.client import HTTPSConnection, HTTPConnection
from base64 import b64encode

import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.utils import formatdate

import re
import os
import sys
import configparser
import argparse

VERSION = '1.1'

class ddnsUpdater(object):
    """
    DDNS update client.

    The config file path.
    @var string
    """
    __configParser = None

    """
    The ConfigParser instance.
    @var ConfigParser
    """
    __configFile = None

    """
    Profile (config section) to load.
    @var string
    """
    __profile = None

    def __init__(self, configFile, profile):
        """
        Constructor

        """

        try:
            if ( os.access(configFile, os.R_OK) == False ):
                raise Exception('The configuration file "' + configFile + '" is not readable!')

            self.__configFile = configFile
            self.__profile = profile
            self.__configParser = configparser.ConfigParser()
            self.__configParser.read(configFile)

        except Exception as e:
            print('[Exception] ', e)


    def sendMail(self, subject, text):
        """
        Sends a notification e-mail to recipient.

        @param string subject
        @param string text
        """

        ## Try to send mail
        try:
            ## Get E-Mail notification data
            notify = self.__configParser.getboolean('Mail', 'notify')

            ## No mail notifications?
            if ( not notify ):
                return False

            mailServer = self.__configParser.get('Mail', 'smtp_server')
            mailServerPort = int(self.__configParser.get('Mail', 'port'), 10)
            mailUsername = self.__configParser.get('Mail', 'username')
            mailPassword = self.__configParser.get('Mail', 'password')
            mailRecipient = self.__configParser.get('Mail', 'recipient')

            # Setup mail
            mail = MIMEMultipart()
            mail['From'] = 'DDNS Updater'
            mail['To'] = mailRecipient
            mail['Date'] = formatdate(localtime=True)
            mail['Subject'] = subject
            mail.attach(MIMEText(text, 'plain'))

            # Connect to SMTP server
            smtp = smtplib.SMTP(mailServer, mailServerPort)

            # Open plain connection
            smtp.ehlo()

            # TLS encryption
            smtp.starttls()

            # Switch to TLS encrypted connection
            smtp.ehlo()

            # Send login information
            smtp.login(mailUsername, mailPassword)

            # Send mail
            smtp.sendmail(mailUsername, mailRecipient, mail.as_string())

            # Close connection
            smtp.quit()
            return True

        except Exception as e:
            print('[Exception] ', e)
            return False


    def getWebIp(self):
        """
        Retrieves external IP from a web server.

        @param string webipServer
        @param string webipPath
        """

        try:
            ## Get web server data
            webipServer = self.__configParser.get(self.__profile, 'external_ip_server')
            webipPath = self.__configParser.get(self.__profile, 'external_ip_server_path')
            useRegEx = self.__configParser.getboolean(self.__profile, 'use_regex')

            ## Connect to web server
            connection = HTTPConnection(webipServer)

            ## Retrieve external IP address
            connection.request('GET', webipPath)
            response = connection.getresponse()

            ## Successful?
            if ( response.status == 200 ):
                webip = response.read()
                webip = webip.decode('ascii')

                ## Use a RegEx to search for IP address in response?
                if ( useRegEx ):
                    pat = re.compile("(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})")
                    result = pat.search(webip)

                    if ( result != None ):
                        webip = result.group(1)
                    else:
                        raise Exception('Failed to use the RegEx!')

                return webip
            else:
                raise Exception('Could not retrieve web IP from "'+ webipServer + webipPath +'"!')

        except Exception as e:
            print('[Exception] ', e)
            self.sendMail('DDNS Updater Error', str(e))
            return ''


    def update(self, newIp):
        """
        Updates DNS record

        @param string newIp
        """

        try:
            ## DDNS information
            ipAddress = self.__configParser.get(self.__profile, 'ip')

            ## No update required?
            if ( ipAddress == newIp ):
                print('No DDNS update required')
                return False

            print('DDNS update required')
            server = self.__configParser.get(self.__profile, 'server')
            serverPath = self.__configParser.get(self.__profile, 'server_path')
            username = self.__configParser.get(self.__profile, 'username')
            password = self.__configParser.get(self.__profile, 'password')
            hostname = self.__configParser.get(self.__profile, 'hostname')

            if ( self.__configParser.has_option(self.__profile, 'mx')):
                mailExchange = self.__configParser.get(self.__profile, 'mx')
            else:
                mailExchange = None

            if ( self.__configParser.has_option(self.__profile, 'wildcard')):
                wildcard = self.__configParser.get(self.__profile, 'wildcard')
            else:
                wildcard = None

            if ( self.__configParser.has_option(self.__profile, 'extra_parameters')):
                extra_parameters = self.__configParser.get(self.__profile, 'extra_parameters')
            else:
                extra_parameters = None

            ## Set up the HTTPS connection
            connection = HTTPSConnection(server)

            ## We need to base64 encode it and then decode it to acsii as python 3 stores it as a byte string
            credentials = username +':'+ password
            userAndPass = b64encode(credentials.encode('UTF-8')).decode('ascii')
            headers = { 'Authorization': 'Basic %s' %  userAndPass , 'user-agent': 'DDNSUpdater/'+ VERSION +' (PM Code Works DDNS Update Utility)'}

            ## Set up paramters
            if ( hostname != None and hostname != '' ):
                parameters = 'hostname='+ hostname
            else:
                raise ValueError('No hostname specified!')

            if ( webip != None and webip != '' ):
                parameters = parameters +'&myip='+ webip
            else:
                raise ValueError('Could not get webip!')

            if ( mailExchange != None and mailExchange != '' ):
                parameters = parameters +'&mx='+ mailExchange

            if ( wildcard != None and wildcard != '' ):
                parameters = parameters +'&wildcard='+ wildcard

            if ( extra_parameters != None and extra_parameters != '' ):
                parameters = parameters + '&' + extra_parameters

            ## Start update
            connection.request('GET', serverPath +'?'+ parameters, headers=headers)
            response = connection.getresponse()

            ## Successful?
            if ( response.status == 200 ):
                print('Update successful!')
                self.__configParser.set(self.__profile, 'ip', webip)

                # Checks if path/file is writable
                if ( os.access(self.__configFile, os.W_OK) == True ):
                    f = open(self.__configFile, 'w')
                    self.__configParser.write(f)
                    f.close()

            elif ( response.status == 401 ):
                raise Exception('Bad password or username!')
            else:
                raise Exception('Error while updating DNS! HTTP error: '+ str(response.status))

            data = response.read()
            data = data.decode('ascii')
            print(data)
            self.sendMail('DDNS Updater', data)
            return True

        except Exception as e:
            print('[Exception] ', e)
            self.sendMail('DDNS Updater Error', str(e))
            return False


if ( __name__ == '__main__' ):

    parser = argparse.ArgumentParser(description='DDNS updater client:')
    parser.add_argument('--config', '-c', metavar='NAME', help='Loads another configuration file.')
    parser.add_argument('--profile', '-p', metavar='NAME', help='Loads another profile (section) inside the configuration file.')
    parser.add_argument('--version', '-v', action='version', version='ddns-updater ' + VERSION, help='Prints version and exits.')

    args = vars(parser.parse_args())

    ## Load another profile?
    if ( args['profile'] ):
        profile = args['profile']
    else:
        profile = 'DDNS'

    ## Load another config file?
    if ( args['config'] ):
        config = args['config']
    else:
        config = '/etc/ddns-updater/ddns.conf'

    updater = ddnsUpdater(config, profile)
    webip = updater.getWebIp()

    if ( webip != '' ):
        print('Detected web IP: '+ webip)
    else:
        exit(1)

    updater.update(webip)
